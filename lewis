<iframe src="data:text/html;base64,PGh0bWw+CjxoZWFkPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIj4KICAgIDxzdHlsZT4KICAgICAgICBodG1sLCBib2R5ewogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICAgIGJvcmRlcjogMDsKICAgICAgICB9CiAgICAgICAgLm50LWVtYmVkewogICAgICAgICAgICB3aWR0aDogMTAyNHB4OwogICAgICAgICAgICBoZWlnaHQ6IDEwMjRweDsKICAgICAgICB9CiAgICAgICAgLm50LWVtYmVkIGRpdiwKICAgICAgICAubnQtZW1iZWQgZGl2IGNhbnZhc3sKICAgICAgICAgICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDsKICAgICAgICAgICAgaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7CiAgICAgICAgfQogICAgPC9zdHlsZT4KICAgIDxzY3JpcHQgdHlwZT0iaW1wb3J0bWFwIj4KewogICAgImltcG9ydHMiOiB7CiAgICAgICAgInJlYWN0IjogImh0dHBzOi8vY2RuLnNreXBhY2suZGV2L3JlYWN0QDE4LjAuMiIsCiAgICAgICAgInJlYWN0LWRvbSI6ICJodHRwczovL2Nkbi5za3lwYWNrLmRldi9yZWFjdC1kb21AMTguMC4yIiwKICAgICAgICAidGhyZWUiOiAiaHR0cHM6Ly9jZG4uc2t5cGFjay5kZXYvdGhyZWVAMC4xNDguMCIsCiAgICAgICAgInJlYWN0LXRocmVlL2ZpYmVyIjogImh0dHBzOi8vY2RuLnNreXBhY2suZGV2L0ByZWFjdC10aHJlZS9maWJlckA3LjAuMjQiCiAgICB9Cn0KPC9zY3JpcHQ+CjxzdHlsZT4KICAgIGh0bWwsIGJvZHl7CiAgICAgICAgbWFyZ2luOiAwOwogICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIGJvcmRlcjogMDsKICAgIH0KICAgIC5udC1lbWJlZHsKICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICB9CiAgICAubnQtZW1iZWQgY2FudmFzewogICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgIGhlaWdodDogMTAwJTsKICAgIH0KPC9zdHlsZT4KPHNjcmlwdCB0eXBlPSJtb2R1bGUiPgogICAgaW1wb3J0IFJlYWN0LCB7dXNlUmVmfSBmcm9tICdyZWFjdCc7CiAgICBpbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJzsKICAgIGltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJzsKICAgIGltcG9ydCB7Q2FudmFzLCB1c2VGcmFtZX0gZnJvbSAncmVhY3QtdGhyZWUvZmliZXInOwoKICAgIGxldCBlbWJlZFJvb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKQogICAgZW1iZWRSb290LmNsYXNzTmFtZSA9ICJudC1lbWJlZCIKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZW1iZWRSb290KQoKICAgIGNvbnN0IFRleHR1cmVNZXNoID0gKCkgPT4gewogICAgICAgIGNvbnN0IG1lc2ggPSB1c2VSZWYobnVsbCkKICAgICAgICB1c2VGcmFtZShzdGF0ZSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHsgY2xvY2ssIG1vdXNlLCBnbCwgc2NlbmUsIGNhbWVyYSB9ID0gc3RhdGUKICAgICAgICAgICAgaWYobWVzaC5jdXJyZW50KXsKICAgICAgICAgICAgICAgIG1lc2guY3VycmVudC5tYXRlcmlhbC51bmlmb3Jtcy51X21vdXNlLnZhbHVlID0gW21vdXNlLngsIG1vdXNlLnldCiAgICAgICAgICAgICAgICBtZXNoLmN1cnJlbnQubWF0ZXJpYWwudW5pZm9ybXMudV9yZXNvbHV0aW9uLnZhbHVlID0gW2VtYmVkUm9vdC5jbGllbnRXaWR0aCp3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbwosZW1iZWRSb290LmNsaWVudEhlaWdodCp3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbwpdCiAgICAgICAgICAgICAgICBtZXNoLmN1cnJlbnQubWF0ZXJpYWwudW5pZm9ybXMudV90aW1lLnZhbHVlID0gY2xvY2suZ2V0RWxhcHNlZFRpbWUoKQogICAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICAKICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnbWVzaCcsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJlZjptZXNoLAogICAgICAgICAgICAgICAgcG9zaXRpb246IFswLDAsMF0sCiAgICAgICAgICAgICAgICBzY2FsZTogMSwKICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBbMCwwLDBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3BsYW5lR2VvbWV0cnknLHthcmdzOlsxMDI0LDEwMjRdfSksIAogICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdzaGFkZXJNYXRlcmlhbCcsewogICAgICAgICAgICAgICAgZnJhZ21lbnRTaGFkZXI6IGAvLyBGcmFnbWVudCBzaGFkZXIKCgoKLy8gVW5pZm9ybXMKCnVuaWZvcm0gdmVjMiB1X3Jlc29sdXRpb247Cgp1bmlmb3JtIHZlYzIgdV9tb3VzZTsKCnVuaWZvcm0gZmxvYXQgdV90aW1lOwoKdW5pZm9ybSB2ZWM0IHVfY29sb3JzWzRdOwoKdW5pZm9ybSBmbG9hdCB1X2JsdXI7IAoKdW5pZm9ybSBib29sIHVfYW5pbWF0ZTsKCnVuaWZvcm0gZmxvYXQgdV9hbmltYXRlX3NwZWVkOwoKdW5pZm9ybSBmbG9hdCB1X2ZyZXF1ZW5jeTsKCiAgICAKCiNkZWZpbmUgUyhhLGIsdCkgc21vb3Roc3RlcChhLGIsdCkKCgoKCgojaWZuZGVmIFNSR0JfRVBTSUxPTiAKI2RlZmluZSBTUkdCX0VQU0lMT04gMC4wMDAwMDAwMQojZW5kaWYKCiNpZm5kZWYgRk5DX1NSR0IyUkdCCiNkZWZpbmUgRk5DX1NSR0IyUkdCCgoKCgpmbG9hdCBzcmdiMnJnYihmbG9hdCBjaGFubmVsKSB7CiAgICByZXR1cm4gKGNoYW5uZWwgPCAwLjA0MDQ1KSA/IGNoYW5uZWwgKiAwLjA3NzM5OTM4MDggOiBwb3coKGNoYW5uZWwgKyAwLjA1NSkgKiAwLjk0Nzg2NzI5ODU3ODE5OSwgMi40KTsKfQoKdmVjMyBzcmdiMnJnYih2ZWMzIHNyZ2IpIHsKICAgIHJldHVybiB2ZWMzKHNyZ2IycmdiKHNyZ2IuciArIFNSR0JfRVBTSUxPTiksIAogICAgICAgICAgICAgICAgc3JnYjJyZ2Ioc3JnYi5nICsgU1JHQl9FUFNJTE9OKSwgICAgICAgICAgICAgICAgIHNyZ2IycmdiKHNyZ2IuYiArIFNSR0JfRVBTSUxPTikpOwp9Cgp2ZWM0IHNyZ2IycmdiKHZlYzQgc3JnYikgewogICAgcmV0dXJuIHZlYzQoc3JnYjJyZ2Ioc3JnYi5yZ2IpLCBzcmdiLmEpOwp9CgojZW5kaWYKCgojaWYgIWRlZmluZWQoRk5DX1NBVFVSQVRFKSAmJiAhZGVmaW5lZChzYXR1cmF0ZSkKI2RlZmluZSBGTkNfU0FUVVJBVEUKI2RlZmluZSBzYXR1cmF0ZSh4KSBjbGFtcCh4LCAwLjAsIDEuMCkKI2VuZGlmCgoKCiNpZm5kZWYgU1JHQl9FUFNJTE9OIAojZGVmaW5lIFNSR0JfRVBTSUxPTiAwLjAwMDAwMDAxCiNlbmRpZgoKI2lmbmRlZiBGTkNfUkdCMlNSR0IKI2RlZmluZSBGTkNfUkdCMlNSR0IKCgpmbG9hdCByZ2Iyc3JnYihmbG9hdCBjaGFubmVsKSB7CiAgICByZXR1cm4gKGNoYW5uZWwgPCAwLjAwMzEzMDgpID8gY2hhbm5lbCAqIDEyLjkyIDogMS4wNTUgKiBwb3coY2hhbm5lbCwgMC40MTY2NjY2NjY2NjY2NjY3KSAtIDAuMDU1Owp9Cgp2ZWMzIHJnYjJzcmdiKHZlYzMgcmdiKSB7CiAgICByZXR1cm4gc2F0dXJhdGUodmVjMyhyZ2Iyc3JnYihyZ2IuciAtIFNSR0JfRVBTSUxPTiksIHJnYjJzcmdiKHJnYi5nIC0gU1JHQl9FUFNJTE9OKSwgcmdiMnNyZ2IocmdiLmIgLSBTUkdCX0VQU0lMT04pKSk7Cn0KCnZlYzQgcmdiMnNyZ2IodmVjNCByZ2IpIHsKICAgIHJldHVybiB2ZWM0KHJnYjJzcmdiKHJnYi5yZ2IpLCByZ2IuYSk7Cn0KCiNlbmRpZgoKCgojaWZuZGVmIEZOQ19NSVhPS0xBQgojZGVmaW5lIEZOQ19NSVhPS0xBQgp2ZWMzIG1peE9rbGFiKCB2ZWMzIGNvbEEsIHZlYzMgY29sQiwgZmxvYXQgaCApIHsKCiAgICAjaWZkZWYgTUlYT0tMQUJfQ09MT1JTUEFDRV9TUkdCCiAgICBjb2xBID0gc3JnYjJyZ2IoY29sQSk7CiAgICBjb2xCID0gc3JnYjJyZ2IoY29sQik7CiAgICAjZW5kaWYKCiAgICAKICAgIGNvbnN0IG1hdDMga0NPTkV0b0xNUyA9IG1hdDMoICAgICAgICAgICAgICAgIAogICAgICAgICAwLjQxMjE2NTYxMjAsICAwLjIxMTg1OTEwNzAsICAwLjA4ODMwOTc5NDcsCiAgICAgICAgIDAuNTM2Mjc1MjA4MCwgIDAuNjgwNzE4OTU4NCwgIDAuMjgxODQ3NDE3NCwKICAgICAgICAgMC4wNTE0NTc1NjUzLCAgMC4xMDc0MDY1NzkwLCAgMC42MzAyNjEzNjE2KTsKICAgIGNvbnN0IG1hdDMga0xNU3RvQ09ORSA9IG1hdDMoCiAgICAgICAgIDQuMDc2NzI0NTI5MywgLTEuMjY4MTQzNzczMSwgLTAuMDA0MTExOTg4NSwKICAgICAgICAtMy4zMDcyMTY4ODI3LCAgMi42MDkzMzIzMjMxLCAtMC43MDM0NzYzMDk4LAogICAgICAgICAwLjIzMDc1OTA1NDQsIC0wLjM0MTEzNDQyOTAsICAxLjcwNjg2MjU2ODkpOwogICAgICAgICAgICAgICAgICAgIAogICAgCiAgICB2ZWMzIGxtc0EgPSBwb3coIGtDT05FdG9MTVMgKiBjb2xBLCB2ZWMzKDEuMC8zLjApICk7CiAgICB2ZWMzIGxtc0IgPSBwb3coIGtDT05FdG9MTVMgKiBjb2xCLCB2ZWMzKDEuMC8zLjApICk7CiAgICAKICAgIHZlYzMgbG1zID0gbWl4KCBsbXNBLCBsbXNCLCBoICk7CiAgICAKICAgIAogICAgdmVjMyByZ2IgPSBrTE1TdG9DT05FKihsbXMqbG1zKmxtcyk7CgogICAgI2lmZGVmIE1JWE9LTEFCX0NPTE9SU1BBQ0VfU1JHQgogICAgcmV0dXJuIHJnYjJzcmdiKHJnYik7CiAgICAjZWxzZQogICAgcmV0dXJuIHJnYjsKICAgICNlbmRpZgp9Cgp2ZWM0IG1peE9rbGFiKCB2ZWM0IGNvbEEsIHZlYzQgY29sQiwgZmxvYXQgaCApIHsKICAgIHJldHVybiB2ZWM0KCBtaXhPa2xhYihjb2xBLnJnYiwgY29sQi5yZ2IsIGgpLCBtaXgoY29sQS5hLCBjb2xCLmEsIGgpICk7Cn0KI2VuZGlmCgoKCm1hdDIgUm90KGZsb2F0IGEpCgp7CgogICAgZmxvYXQgcyA9IHNpbihhKTsKCiAgICBmbG9hdCBjID0gY29zKGEpOwoKICAgIHJldHVybiBtYXQyKGMsIC1zLCBzLCBjKTsKCn0KCgoKCgovLyBDcmVhdGVkIGJ5IGluaWdvIHF1aWxleiAtIGlxLzIwMTQKCi8vIExpY2Vuc2UgQ3JlYXRpdmUgQ29tbW9ucyBBdHRyaWJ1dGlvbi1Ob25Db21tZXJjaWFsLVNoYXJlQWxpa2UgMy4wIFVucG9ydGVkIExpY2Vuc2UuCgp2ZWMyIGhhc2goIHZlYzIgcCApCgp7CgogICAgcCA9IHZlYzIoIGRvdChwLHZlYzIoMjEyNy4xLDgxLjE3KSksIGRvdChwLHZlYzIoMTI2OS41LDI4My4zNykpICk7CgoJcmV0dXJuIGZyYWN0KHNpbihwKSo0Mzc1OC41NDUzKTsKCn0KCgoKZmxvYXQgbm9pc2UoIGluIHZlYzIgcCApCgp7CgogICAgdmVjMiBpID0gZmxvb3IoIHAgKTsKCiAgICB2ZWMyIGYgPSBmcmFjdCggcCApOwoKCQoKCXZlYzIgdSA9IGYqZiooMy4wLTIuMCpmKTsKCgoKICAgIGZsb2F0IG4gPSBtaXgoIG1peCggZG90KCAtMS4wKzIuMCpoYXNoKCBpICsgdmVjMigwLjAsMC4wKSApLCBmIC0gdmVjMigwLjAsMC4wKSApLCAKCiAgICAgICAgICAgICAgICAgICAgICAgIGRvdCggLTEuMCsyLjAqaGFzaCggaSArIHZlYzIoMS4wLDAuMCkgKSwgZiAtIHZlYzIoMS4wLDAuMCkgKSwgdS54KSwKCiAgICAgICAgICAgICAgICAgICBtaXgoIGRvdCggLTEuMCsyLjAqaGFzaCggaSArIHZlYzIoMC4wLDEuMCkgKSwgZiAtIHZlYzIoMC4wLDEuMCkgKSwgCgogICAgICAgICAgICAgICAgICAgICAgICBkb3QoIC0xLjArMi4wKmhhc2goIGkgKyB2ZWMyKDEuMCwxLjApICksIGYgLSB2ZWMyKDEuMCwxLjApICksIHUueCksIHUueSk7CgoJcmV0dXJuIDAuNSArIDAuNSpuOwoKfQoKCgp2b2lkIG1haW4oKXsKCiAgCgogICAgdmVjMiB1diA9IGdsX0ZyYWdDb29yZC54eS91X3Jlc29sdXRpb24ueHk7CgogICAgZmxvYXQgcmF0aW8gPSB1X3Jlc29sdXRpb24ueCAvIHVfcmVzb2x1dGlvbi55OwoKCgogICAgdmVjMiB0dXYgPSB1djsKCiAgICB0dXYgLT0gLjU7CgogICAgCgogICAgLy9hbmltYXRpb24KCiAgICBmbG9hdCBzcGVlZCA9IHVfdGltZSAqIDEwLiAqIHVfYW5pbWF0ZV9zcGVlZDsKCiAgICBpZih1X2FuaW1hdGUgPT0gZmFsc2UpewoKICAgICAgc3BlZWQgPSAwLjA7CgogICAgfQoKCgogICAgLy8gcm90YXRlIHdpdGggTm9pc2UKCiAgICBmbG9hdCBkZWdyZWUgPSBub2lzZSh2ZWMyKHNwZWVkLzEwMC4wLCB0dXYueCp0dXYueSkpOwoKCgogICAgdHV2LnkgKj0gMS4vcmF0aW87CgogICAgdHV2ICo9IFJvdChyYWRpYW5zKChkZWdyZWUtLjUpKjcyMC4rMTgwLikpOwoKCXR1di55ICo9IHJhdGlvOwoKICAgIAoKICAgIC8vIFdhdmUgd2FycCB3aXRoIHNpbgoKICAgIGZsb2F0IGZyZXF1ZW5jeSA9IDIwLiAqIHVfZnJlcXVlbmN5OwoKICAgIGZsb2F0IGFtcGxpdHVkZSA9IDMwLiAqICgxMC4qKDAuMDErdV9ibHVyKSk7CgogICAgCgogICAgdHV2LnggKz0gc2luKHR1di55KmZyZXF1ZW5jeStzcGVlZCkvYW1wbGl0dWRlOwoKICAgCXR1di55ICs9IHNpbih0dXYueCpmcmVxdWVuY3kqMS41K3NwZWVkKS8oYW1wbGl0dWRlKi41KTsKCiAgICAKCiAgICAKCiAgICAvLyBkcmF3IHRoZSBpbWFnZQoKICAgIHZlYzQgbGF5ZXIxID0gbWl4T2tsYWIodV9jb2xvcnNbMF0sIHVfY29sb3JzWzFdLCBTKC0uMywgLjIsICh0dXYqUm90KHJhZGlhbnMoLTUuKSkpLngpKTsKCiAgICB2ZWM0IGxheWVyMiA9IG1peE9rbGFiKHVfY29sb3JzWzJdLCB1X2NvbG9yc1szXSwgUygtLjMsIC4yLCAodHV2KlJvdChyYWRpYW5zKC01LikpKS54KSk7CgogICAgCgogICAgdmVjNCBmaW5hbENvbXAgPSBtaXhPa2xhYihsYXllcjEsIGxheWVyMiwgUyguNSwgLS4zLCB0dXYueSkpOwoKICAgIAoKICAgIAoKICAgIGdsX0ZyYWdDb2xvciA9IGZpbmFsQ29tcDsKCiAgICAKCn0KCmAsCiAgICAgICAgICAgICAgICB2ZXJ0ZXhTaGFkZXI6IGAvLyBWZXJ0ZXggc2hhZGVyCgp2b2lkIG1haW4oKSB7CiAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTsKfWAsCiAgICAgICAgICAgICAgICB1bmlmb3Jtczoge3VfY29sb3JzOiB7dmFsdWU6IFtuZXcgVEhSRUUuVmVjdG9yNCgwLDAsMCwxKSxuZXcgVEhSRUUuVmVjdG9yNCgwLjU0MTE3NjQ3MDU4ODIzNTMsMC41MzMzMzMzMzMzMzMzMzMzLDAuNTMzMzMzMzMzMzMzMzMzMywxKSxuZXcgVEhSRUUuVmVjdG9yNCgwLjMzMzMzMzMzMzMzMzMzMzMsMC4zMzMzMzMzMzMzMzMzMzMzLDAuMzMzMzMzMzMzMzMzMzMzMywxKSxuZXcgVEhSRUUuVmVjdG9yNCgwLjI1MDk4MDM5MjE1Njg2Mjc0LDAuMjUwOTgwMzkyMTU2ODYyNzQsMC4yNTA5ODAzOTIxNTY4NjI3NCwxKV19LHVfYmx1cjoge3ZhbHVlOiAwLjY0Nn0sdV9hbmltYXRlOiB7dmFsdWU6IHRydWV9LHVfYW5pbWF0ZV9zcGVlZDoge3ZhbHVlOiAxfSx1X2ZyZXF1ZW5jeToge3ZhbHVlOiAwLjV9LHVfdGltZToge3ZhbHVlOiAwfSx1X21vdXNlOiB7dmFsdWU6IFswLDBdfSx1X3Jlc29sdXRpb246IHt2YWx1ZTogWzIwNDgsMjA0OF19fSwKICAgICAgICAgICAgICAgIHdpcmVmcmFtZTogZmFsc2UsIAogICAgICAgICAgICAgICAgd2lyZWZyYW1lTGluZXdpZHRoOiAwLAogICAgICAgICAgICAgICAgZGl0aGVyaW5nOiBmYWxzZSwKICAgICAgICAgICAgICAgIGZsYXRTaGFkaW5nOiB0cnVlLAogICAgICAgICAgICAgICAgZG91YmxlU2lkZWQ6IHRydWUsCiAgICAgICAgICAgICAgICBnbHNsVmVyc2lvbjogIjEwMCIKICAgICAgICAgICAgfSkKICAgICAgICApOyAgCiAgICB9CgogICAgUmVhY3RET00ucmVuZGVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2FudmFzLHsKICAgICAgICAgICAgZ2w6IHsKICAgICAgICAgICAgICAgIHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogdHJ1ZSwKICAgICAgICAgICAgICAgIHByZW11bHRpcGxpZWRBbHBoYTogZmFsc2UsCiAgICAgICAgICAgICAgICBhbHBoYTogdHJ1ZSwKICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLAogICAgICAgICAgICAgICAgYW50aWFsaWFzOiB0cnVlLAogICAgICAgICAgICAgICAgcHJlY2lzaW9uOiAiaGlnaHAiLAogICAgICAgICAgICAgICAgcG93ZXJQcmVmZXJlbmNlOiAiaGlnaC1wZXJmb3JtYW5jZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZHByOiBbMiwyXSwKICAgICAgICAgICAgY2FtZXJhOiB7CiAgICAgICAgICAgICAgICBmb3Y6IDc1LAogICAgICAgICAgICAgICAgbmVhcjogMC4xLAogICAgICAgICAgICAgICAgZmFyOiAxMDAwLAogICAgICAgICAgICAgICAgcG9zaXRpb246IFswLDAsNV0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3R5bGU6eyBoZWlnaHQ6ICIxMDAlIiwgd2lkdGg6ICIxMDAlIiB9CiAgICAgICAgfSwKICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRleHR1cmVNZXNoKSAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgKSwgZW1iZWRSb290KTsKPC9zY3JpcHQ+CjwvaGVhZD4KPGJvZHk+CjwhLS0gQVNTRVQgTk9UIElOTElORUQ6IGFzc2V0cy9ib29rLjVmYjExYjhkLnN2ZyAtLT4KCjwhLS0gQVNTRVQgTk9UIElOTElORUQ6IGFzc2V0cy9seWdpYS5mNzQ5MDU5NC5zdmcgLS0+Cgo8IS0tIEFTU0VUIE5PVCBJTkxJTkVEOiBhc3NldHMvb3ZlcmZsb3cuOGQ1MDQxNWQuc3ZnIC0tPgoKPCEtLSBBU1NFVCBOT1QgSU5MSU5FRDogYXNzZXRzL2FkZC5hNTUyNDBkZC5zdmcgLS0+Cgo8IS0tIEFTU0VUIE5PVCBJTkxJTkVEOiBhc3NldHMvdmVydGljYWwuOTA2MTA4NDkuc3ZnIC0tPgoKPCEtLSBBU1NFVCBOT1QgSU5MSU5FRDogYXNzZXRzL2hvcml6b250YWwuNDRmNzcxZjguc3ZnIC0tPgoKPCEtLSBBU1NFVCBOT1QgSU5MSU5FRDogYXNzZXRzL3NpZy44NTBhODVlNy5zdmcgLS0+Cgo8IS0tIEFTU0VUIE5PVCBJTkxJTkVEOiBhc3NldHMvdHJhc2guNTI0ZGJjZDMuc3ZnIC0tPgoKPCEtLSBBU1NFVCBOT1QgSU5MSU5FRDogYXNzZXRzL21pbnVzLjFlMWEwYWJkLnN2ZyAtLT4KCjwhLS0gQVNTRVQgTk9UIElOTElORUQ6IGFzc2V0cy9lZmZlY3QuNDU1NzI0M2Yuc3ZnIC0tPgoKPCEtLSBBU1NFVCBOT1QgSU5MSU5FRDogYXNzZXRzL3Zpc2libGUuYzZkNGUxYzAuc3ZnIC0tPgoKPCEtLSBBU1NFVCBOT1QgSU5MSU5FRDogYXNzZXRzL2hpZGRlbi41YTRmYzI1NC5zdmcgLS0+Cgo8IS0tIEFTU0VUIE5PVCBJTkxJTkVEOiBhc3NldHMvd29ya2VyLmI3NjFmYjExLmpzIC0tPgo8L2JvZHk+CjwvaHRtbD4=" style="border:0;margin:0;width: 100%;height:100vh;" />
